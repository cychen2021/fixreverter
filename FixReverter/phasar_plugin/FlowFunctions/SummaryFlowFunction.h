#ifndef SUMMARYFLOWFUNCTION_H_
#define SUMMARYFLOWFUNCTION_H_

#include "Utils/Utils.h"
#include "Utils/Logs.h"

struct SummaryFlowFunction : psr::FlowFunction<DependenceAnalyzer::d_t> {
private:
  GlobalDataHolder *GlobalData;
  const llvm::Instruction* callStmt;
  const llvm::Function *calleeMthd;
  psr::FlowFactManager<MyFlowFact> &FFManager;
  std::vector<int> sinkIndex;

public:
  SummaryFlowFunction(GlobalDataHolder *GlobalData,
  const llvm::Instruction* callStmt, const llvm::Function *calleeMthd,
  std::vector<int> sinkIndex,
  psr::FlowFactManager<MyFlowFact> &FFManager)
  : GlobalData(GlobalData), callStmt(callStmt), calleeMthd(calleeMthd), sinkIndex(sinkIndex), FFManager(FFManager) {}
  
  std::set<DependenceAnalyzer::d_t> computeTargets(DependenceAnalyzer::d_t source) override {
    if (GlobalData->timeLimit != -1) {
      time_t now = time(0);
      double diff = difftime(now, GlobalData->startTime);
      if (((int) diff) % 30 <= 1 || ((int) diff) % 30 >= 29) {
        llvm::outs() << "Analyzer - [DEBUG] Time elapsed: " << diff << " seconds [" << diff / GlobalData->timeLimit * 100 << "%]\n";
      }
      if (diff > GlobalData->timeLimit) {
        llvm::outs() << "Analyzer - [DEBUG] Time limit reached, skip this flow\n";
        return {};
      }
    }

    if (source->as<MyFlowFact>()->isZero()) {
      return {source};
    }
    auto SourceValue = source->as<MyFlowFact>()->get().value();
    logFromToFlow(llvm::outs(), SourceValue, callStmt, "summary");
    auto callSite = llvm::cast<llvm::CallBase>(callStmt);
    for (int idx : sinkIndex) {
      if (idx < callSite->getNumArgOperands() && SourceValue == callSite->getArgOperand(idx)) {
        // TODO: better debug info (callstmt & method name)
        updateTaintPaths(std::make_shared<ValueNode>(callStmt), std::make_shared<ValueNode>(SourceValue), GlobalData->TaintPaths);
        logGeneralInfo(llvm::outs(), "Analyzer - [DEBUG] summary flow: sink generated by summary flow");
        GlobalData->Leaks.insert(callStmt);
        break;
      }
    }
    return {source};
  }
};

#endif
